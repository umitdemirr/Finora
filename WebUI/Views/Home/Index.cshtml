@model HomeViewModel

<style>
    .card {
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        border: none;
        background: var(--card-bg);
        border-radius: 16px;
        color: var(--text-color);
    }
    .card:hover {
        transform: translateY(-5px);
        box-shadow: var(--hover-shadow);
    }
    .list-group-item {
        transition: all 0.2s ease;
        border-left: 4px solid transparent;
        background-color: var(--card-bg);
        color: var(--text-color);
        border-color: var(--border-color);
    }
    .list-group-item:hover {
        background-color: var(--nav-hover);
        border-left: 4px solid var(--success);
    }
    .custom-select {
        border-radius: 20px;
        padding: 8px 15px;
        border: 1px solid var(--border-color);
        background-color: var(--card-bg);
        color: var(--text-color);
        transition: all 0.2s ease;
    }
    .custom-select:focus {
        box-shadow: 0 0 0 0.2rem rgba(58, 210, 159, 0.25);
        border-color: var(--success);
    }
    .btn-outline-secondary {
        border-radius: 20px;
        padding: 5px 15px;
        transition: all 0.2s ease;
        color: var(--text-muted);
        border-color: var(--border-color);
    }
    .btn-outline-secondary:hover {
        background-color: var(--success);
        border-color: var(--success);
        color: var(--card-bg);
    }
    .btn-outline-secondary.active {
        background-color: var(--success);
        border-color: var(--success);
        color: var(--card-bg);
    }
    .card-title {
        color: var(--text-color);
    }
    .text-muted {
        color: var(--text-muted) !important;
    }
    .fe {
        transition: all 0.2s ease;
        color: var(--text-muted);
    }
    .card:hover .fe {
        transform: scale(1.1);
    }
    
    /* Özet kartları için özel stiller */
    .summary-card {
        position: relative;
        overflow: hidden;
    }
    
    .summary-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 4px;
        background: linear-gradient(90deg, var(--success), rgba(58, 210, 159, 0.3));
        transition: all 0.3s ease;
    }
    
    .summary-card:hover::before {
        height: 6px;
    }
    
    .summary-card .card-body {
        padding: 1.5rem;
        background: var(--card-bg);
    }
    
    .summary-card .small {
        font-size: 0.85rem;
        font-weight: 500;
    }
    
    .summary-card .card-title {
        font-size: 1.5rem;
        font-weight: 600;
        margin: 0.5rem 0;
        color: var(--text-color);
    }
    
    .summary-card .fe {
        font-size: 2rem;
        opacity: 0.8;
    }
    
    .summary-card:hover .fe {
        transform: scale(1.1) rotate(5deg);
    }
    
    /* Trend göstergeleri için stiller */
    .trend-indicator {
        display: inline-flex;
        align-items: center;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 0.8rem;
        font-weight: 500;
    }
    
    .trend-up {
        background-color: var(--income-bg);
        color: var(--income);
    }
    
    .trend-down {
        background-color: var(--expense-bg);
        color: var(--expense);
    }
    
    .fe-arrow-up, .fe-arrow-down {
        margin-right: 4px;
        font-size: 0.75rem;
    }
    
    /* Grafik kartları için özel stiller */
    .chart-card {
        border-radius: 16px;
        background: var(--card-bg);
        box-shadow: var(--card-shadow);
    }
    
    .chart-card .card-header {
        background: var(--card-bg);
        border-bottom: 1px solid var(--border-color);
        padding: 1.25rem 1.5rem;
    }
    
    .chart-card .card-header strong {
        font-size: 1.1rem;
        color: var(--text-color);
    }
    
    /* Bütçe ve Hedef kartları için ek stiller */
    .budget-item, .goal-item {
        padding: 15px;
        border-radius: 10px;
        background: var(--card-bg);
        transition: all 0.3s ease;
    }
    
    .budget-item:hover, .goal-item:hover {
        background: var(--nav-hover);
    }
    
    .progress {
        background-color: var(--border-color);
        border-radius: 10px;
        overflow: hidden;
    }
    
    .progress-bar {
        transition: width 1s ease;
        border-radius: 10px;
    }
    
    .badge {
        padding: 8px 12px;
        border-radius: 20px;
        font-weight: 500;
    }
    
    .badge-success {
        background-color: var(--income-bg);
        color: var(--income);
    }
    
    .badge-primary {
        background-color: var(--primary);
        color: var(--card-bg);
    }
    
    .btn-outline-primary {
        border-color: var(--primary);
        color: var(--primary);
    }
    
    .btn-outline-primary:hover {
        background-color: var(--primary);
        color: var(--card-bg);
    }
</style>

<div class="row justify-content-center">
    <div class="col-12">
        <div class="row align-items-center mb-2">
            <div class="col">
                <h2 class="h5 page-title">Ana Sayfa</h2>
            </div>
            <div class="col-auto">
                <div class="d-flex">
                    <select class="custom-select mr-2">
                        <option value="30" selected>Son 30 Gün</option>
                        <option value="7">Bu Hafta</option>
                        <option value="30">Bu Ay</option>
                        <option value="365">Bu Yıl</option>
                        <option value="1825">Son 5 Yıl</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- Özet Kartları -->
        <div class="row my-4">
            <div class="col-md-3">
                <div class="card shadow mb-4 summary-card">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col">
                                <small class="text-muted mb-1">Toplam Varlık</small>
                                <h3 class="card-title">₺@Model.TotalMoney?.ToString("N2")</h3>
                                <div class="trend-indicator trend-up">
                                    <span class="fe fe-arrow-up"></span>
                                    <span>3.5%</span>
                                </div>
                            </div>
                            <div class="col-auto">
                                <span class="fe fe-dollar-sign"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card shadow mb-4 summary-card">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col">
                                <small class="text-muted mb-1">Toplam Gelir</small>
                                <h3 class="card-title" style="color:green">₺@Model.TotalIncome?.ToString("N2")</h3>
                                <div class="trend-indicator trend-up">
                                    <span class="fe fe-arrow-up" style="color:green"></span>
                                    <span>2.8%</span>
                                </div>
                            </div>
                            <div class="col-auto">
                                <span class="fe fe-trending-up"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card shadow mb-4 summary-card">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col">
                                <small class="text-muted mb-1">Toplam Gider</small>
                                <h3 class="card-title" style="color:red">₺@Model.TotalExpanse?.ToString("N2")</h3>
                                <div class="trend-indicator trend-down" style="color:red">
                                    <span class="fe fe-arrow-down"></span>
                                    <span>1.2%</span>
                                </div>
                            </div>
                            <div class="col-auto">
                                <span class="fe fe-trending-down"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card shadow mb-4 summary-card">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col">
                                <small class="text-muted mb-1">Net Kalan</small>
                                <h3 class="card-title">₺@Model.NetWorth?.ToString("N2")</h3>
                                <div class="trend-indicator trend-up">
                                    <span class="fe fe-arrow-up"></span>
                                    <span>8.3%</span>
                                </div>
                            </div>
                            <div class="col-auto">
                                <span class="fe fe-bar-chart-2"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Grafikler -->
        <div class="row">
            <!-- Gelir/Gider Grafiği -->
            <div class="col-md-6 mb-4">
                <div class="card shadow chart-card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <strong class="card-title mb-0">Gelir/Gider Grafiği</strong>
                        <div class="btn-group" role="group" aria-label="Zaman Filtreleri" id="filterButtons">
                            <a class="btn btn-outline-secondary btn-sm" href='@Url.Action("Index", "Home", new { range = 1 })'>Bugün</a>
                            <a class="btn btn-outline-secondary btn-sm" href='@Url.Action("Index", "Home", new { range = 7 })'>1 Hafta</a>
                            <a class="btn btn-outline-secondary btn-sm" href='@Url.Action("Index", "Home", new { range = 30 })'>1 Ay</a>
                            <a class="btn btn-outline-secondary btn-sm" href='@Url.Action("Index", "Home", new { range = 180 })'>6 Ay</a>
                            <a class="btn btn-outline-secondary btn-sm" href='@Url.Action("Index", "Home", new { range = 365 })'>1 Yıl</a>
                        </div>
                    </div>
                    <div class="card-body">
                        <canvas id="gelirGider" width="733" height="300"></canvas>
                    </div>
                </div>
            </div>

            <!-- Varlık Dağılımı -->
            <div class="col-md-3">
                <div class="card shadow mb-4 chart-card">
                    <div class="card-header">
                        <strong>Varlık Dağılımı</strong>
                        <div class="tabs btn-group" style="margin-left: 10px">
                            <button class="btn tab-btn active btn-outline-secondary btn-sm" data-type="stock">Hisse</button>
                            <button class="btn tab-btn btn-outline-secondary btn-sm" data-type="crypto">Kripto</button>
                            <button class="btn tab-btn btn-outline-secondary btn-sm" data-type="emtia">Emtia</button>
                        </div>
                    </div>
                    
                    <div class="card-body">
                        <div class="chart-box">
                            <div style="height: 300px; position: relative;">
                                <canvas id="assetTypeChart" height="300"></canvas>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
            <!-- Harcama Kategorileri -->
            <div class="col-md-3">
                <div class="card shadow mb-4 chart-card">
                    <div class="card-header">
                        <strong>Harcama Kategorileri</strong>
                    </div>
                    <div class="card-body">
                        <div class="chart-box">
                            <canvas id="expenseCategoriesChart" height="300"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Son İşlemler -->
        <div class="row">
            <div class="col-md-12">
                <div class="card shadow">
                    <div class="card-header">
                        <strong class="card-title">Son İşlemler</strong>
                        <a class="float-right small text-muted" href="/BankTransaction/Index">Tümünü Gör</a>
                    </div>
                    <div class="card-body">
                        <div class="list-group list-group-flush my-n3">

                            @foreach (var transaction in Model.BankTransactions.Data.TakeLast(3))
                            {
                                if (transaction.TransactionType == "Gelir")
                                {
                                    <div class="list-group-item">
                                        <div class="row align-items-center">
                                            <div class="col-auto">
                                                <span class="fe fe-arrow-up-circle fe-24 text-success"></span>
                                            </div>
                                            <div class="col">
                                                <small><strong>@transaction.Description</strong></small>
                                                <div class="my-0 text-muted small">@transaction.Date</div>
                                            </div>
                                            <div class="col-auto">
                                                <strong class="text-success">+ @transaction.Amount.ToString("N2")</strong>
                                            </div>
                                        </div>
                                    </div>
                                }
                                if (transaction.TransactionType == "Gider")
                                {
                                    <div class="list-group-item">
                                        <div class="row align-items-center">
                                            <div class="col-auto">
                                                <span class="fe fe-arrow-down-circle fe-24 text-danger"></span>
                                            </div>
                                            <div class="col">
                                                <small><strong>@transaction.Description</strong></small>
                                                <div class="my-0 text-muted small">@transaction.Date</div>
                                            </div>
                                            <div class="col-auto">
                                                <strong class="text-danger">- @transaction.Amount.ToString("N2")</strong>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
 const crosshairPlugin = {
     id: 'crosshair',
     afterEvent(chart, args) {
         const {event} = args;
         chart._mouseX = event.x;
         chart._mouseY = event.y;
     },
     afterDraw(chart) {
         const {ctx, chartArea: {top, bottom, left, right}} = chart;
         const x = chart._mouseX;
         const y = chart._mouseY;

         if (x >= left && x <= right && y >= top && y <= bottom) {
             ctx.save();
             ctx.setLineDash([5, 1]);
             ctx.beginPath();
             ctx.moveTo(x, top);
             ctx.lineTo(x, bottom);
             ctx.moveTo(left, y);
             ctx.lineTo(right, y);
             ctx.lineWidth = 1;
             ctx.strokeStyle = "#999";
             ctx.stroke();
             ctx.restore();
         }
     }
 };
    document.getElementById("filterButtons").addEventListener("click", function (event) {
        if (event.target.tagName === "BUTTON") {
            let range = event.target.getAttribute("data-range");
            updateChartData(range);
        }
    });
    let chart = null;
    function updateChartData(range) {
        const labels = @Html.Raw(Json.Serialize(Model.Labels)); // Veriyi Controller'dan alıyoruz
        const gelirler = @Html.Raw(Json.Serialize(Model.Gelirler));
        const giderler = @Html.Raw(Json.Serialize(Model.Giderler));

        // Filtreleme işlemi
        const filteredLabels = [];
        const filteredGelirler = [];
        const filteredGiderler = [];
        const today = new Date();
        const filterDate = (dateString) => {
            const date = new Date(dateString);
            switch (range) {
                case '1':
                    return date.toDateString() === today.toDateString();
                case '7':
                    return (today - date) <= (7 * 24 * 60 * 60 * 1000);
                case '30':
                    return (today - date) <= (30 * 24 * 60 * 60 * 1000);
                case '180':
                    return (today - date) <= (180 * 24 * 60 * 60 * 1000);
                case '365':
                    return (today - date) <= (365 * 24 * 60 * 60 * 1000);
                default:
                    return true;
            }
        };

        for (let i = 0; i < labels.length; i++) {
            const dateLabel = new Date(labels[i]);
            if (filterDate(dateLabel)) {
                filteredLabels.push(labels[i]);
                filteredGelirler.push(gelirler[i]);
                filteredGiderler.push(giderler[i]);
            }
        }
        if (chart) {chart.destroy();}

        chart = new Chart(document.getElementById("gelirGider"), {
            type: 'line',
            data: {
                labels: filteredLabels,
                datasets: [
                    {
                        label: 'Gelir',
                        borderColor: '#3ad29f',
                        backgroundColor: 'rgba(58, 210, 159, 0.1)',
                        data: filteredGelirler,
                        fill: true,
                        tension: 0.4,
                        pointRadius: 0,
                        pointHoverRadius: 6,
                        pointBackgroundColor: '#3ad29f',
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: '#3ad29f',
                        pointHoverBorderWidth: 2
                    },
                    {
                        label: 'Gider',
                        borderColor: '#ff7675',
                        backgroundColor: 'rgba(255, 118, 117, 0.1)',
                        data: filteredGiderler,
                        fill: true,
                        tension: 0.4,
                        pointRadius: 0,
                        pointHoverRadius: 6,
                        pointBackgroundColor: '#ff7675',
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: '#ff7675',
                        pointHoverBorderWidth: 2
                    }
                ]
            },
            options: {
                responsive: true,
                interaction: {
                    mode: 'nearest',
                    intersect: false
                },
                plugins: {
                    legend: {
                        display: true,
                        position: 'top',
                        labels: {
                            padding: 20,
                            usePointStyle: true,
                            pointStyle: 'circle'
                        }
                    },
                    tooltip: {
                        enabled: true,
                        mode: 'nearest',
                        intersect: false,
                        backgroundColor: 'rgba(255, 255, 255, 0.9)',
                        titleColor: '#2d3436',
                        bodyColor: '#2d3436',
                        borderColor: '#e0e0e0',
                        borderWidth: 1,
                        padding: 10,
                        displayColors: true,
                        callbacks: {
                            label: function(context) {
                                return context.dataset.label + ': ₺' + context.parsed.y.toLocaleString('tr-TR', { minimumFractionDigits: 2 });
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        grid: { 
                            display: true,
                            color: 'rgba(0,0,0,0.05)'
                        },
                        ticks: {
                            padding: 10,
                            color: '#636e72'
                        }
                    },
                    y: {
                        beginAtZero: true,
                        grid: { 
                            display: true,
                            color: 'rgba(0,0,0,0.05)'
                        },
                        ticks: {
                            padding: 10,
                            color: '#636e72',
                            callback: function(value) {
                                return '₺' + value.toLocaleString('tr-TR', { minimumFractionDigits: 2 });
                            }
                        }
                    }
                },
                animation: {
                    duration: 1000,
                    easing: 'easeInOutQuart'
                }
            },
            plugins: [crosshairPlugin]
        });
    }
    updateChartData(30);

    // Varlık Dağılımı Grafiği
    @{
        var stockData = Model.StockDagilimi.Select(x => new { label = x.Symbol, value = x.Percentage});
        var cryptoData = Model.CryptoDagilimi.Select(x => new { label = x.Symbol, value = x.Percentage });
        var emtiaData = Model.EmtiaDagilimi.Select(x => new { label = x.Symbol, value = x.Percentage });

        var assetTabsJson = Json.Serialize(new
        {
            stock = stockData,
            crypto = cryptoData,
            emtia = emtiaData
        });
    }

       const assetTabs = @Html.Raw(assetTabsJson);
       const ctx = document.getElementById('assetTypeChart');
       let activeChart;

       function renderAssetChart(type) {
           const data = assetTabs[type] || [];
           const labels = data.map(x => x.label);
           const values = data.map(x => x.value);

           if (activeChart) activeChart.destroy();

           activeChart = new Chart(ctx, {
               type: 'doughnut',
               data: {
                   labels: labels,
                   datasets: [{
                       data: values,
                       backgroundColor: [
                           '#74b9ff', '#00b894', '#ffeaa7', '#a29bfe',
                           '#fab1a0', '#fd79a8', '#55efc4', '#636e72'
                       ],
                       borderWidth: 0,
                       hoverOffset: 12
                   }]
               },
               options: {
                   responsive: true,
                   maintainAspectRatio: false,
                   cutout: '70%',
                   plugins: {
                       legend: {
                           position: 'right',
                           labels: {
                               usePointStyle: true,
                               pointStyle: 'circle',
                               padding: 20,
                               filter: (item) => item.index < 6 // sadece ilk 6 göster
                           }
                       },
                       tooltip: {
                           callbacks: {
                               label: function(ctx) {
                                   return ctx.label + ': %' + ctx.raw;
                               }
                           }
                       }
                   }
               }
           });
       }

       document.querySelectorAll('.tab-btn').forEach(btn => {
           btn.addEventListener('click', () => {
               document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
               btn.classList.add('active');
               renderAssetChart(btn.dataset.type);
           });
       });

       // İlk yüklemede stock göster
       renderAssetChart('stock');


    // Harcama Kategorileri Grafiği
    @{
        var labelsJson = Json.Serialize(Model.Harcamalar.Select(x => x.Category));
        var dataJson = Json.Serialize(Model.Harcamalar.Select(x => x.Percentage));
    }
        const labels = @Html.Raw(labelsJson);
        const data = @Html.Raw(dataJson);
        const expenseCategoriesChart = new Chart(document.getElementById('expenseCategoriesChart'), {
            type: 'doughnut',
            data: {
                labels: labels,
                datasets: [{
                    data: data,
                    backgroundColor: [
                        'rgba(58, 210, 159, 0.7)',
                        'rgba(54, 162, 235, 0.7)',
                        'rgba(255, 206, 86, 0.7)',
                        'rgba(75, 192, 192, 0.7)',
                        'rgba(153, 102, 255, 0.7)',
                        'rgba(255, 159, 64, 0.7)',
                        'rgba(201, 203, 207, 0.7)', // fazla olursa görünmez
                        'rgba(255, 99, 132, 0.7)'
                    ],
                    borderWidth: 0
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'right',
                        labels: {
                            padding: 20,
                            usePointStyle: true,
                            pointStyle: 'circle',
                            filter: function(item, data) {
                                return item.index < 6; // sadece ilk 6 etiketi göster
                            }
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return context.label + ': %' + context.raw;
                            }
                        }
                    }
                },
                cutout: '70%'
            }
        });
</script>
